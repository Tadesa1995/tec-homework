{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-lessons\\\\natan-react\\\\29-11\\\\my-app\\\\src\\\\Componnet\\\\Jsonplaceholders\\\\Jsonplaceholders.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Jsonplaceholders extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      url: [],\n      id: \"\",\n      title: \"\"\n    };\n\n    this.componentDidMount = () => {\n      this.getPost();\n    };\n\n    this.componentDidUpdate = () => {\n      log;\n    };\n\n    this.getPost = () => {\n      fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response => {\n        return response.json();\n      }) //   the data=posts\n      .then(data => {\n        console.log(data); // in order that the empty array posts wil reccive the data from the jsonplaceholders\n\n        this.setState({\n          url: data\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.url.map((post, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [i + 1, \". \", post.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", post.body]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 12\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Jsonplaceholders;","map":{"version":3,"sources":["C:/react-lessons/natan-react/29-11/my-app/src/Componnet/Jsonplaceholders/Jsonplaceholders.js"],"names":["React","Jsonplaceholders","Component","state","url","id","title","componentDidMount","getPost","componentDidUpdate","log","fetch","then","response","json","data","console","setState","catch","err","render","map","post","i","body","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,gBAAN,SAA+BD,KAAK,CAACE,SAArC,CAA+C;AAAA;AAAA;AAAA,SAC/CC,KAD+C,GACzC;AAACC,MAAAA,GAAG,EAAC,EAAL;AAAQC,MAAAA,EAAE,EAAC,EAAX;AAAcC,MAAAA,KAAK,EAAC;AAApB,KADyC;;AAAA,SAE/CC,iBAF+C,GAE7B,MAAI;AACtB,WAAKC,OAAL;AACC,KAJ8C;;AAAA,SAK/CC,kBAL+C,GAK5B,MAAI;AAErBC,MAAAA,GAAG;AACJ,KAR8C;;AAAA,SAW3CF,OAX2C,GAWjC,MAAM;AACZG,MAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHH,EAIA;AAJA,OAKGF,IALH,CAKSG,IAAD,IAAU;AACdC,QAAAA,OAAO,CAACN,GAAR,CAAYK,IAAZ,EADc,CAEd;;AACA,aAAKE,QAAL,CAAc;AAAEb,UAAAA,GAAG,EAAEW;AAAP,SAAd;AACD,OATH,EAUGG,KAVH,CAUUC,GAAD,IAAS;AACdH,QAAAA,OAAO,CAACN,GAAR,CAAYS,GAAZ;AACD,OAZH;AAaD,KAzBwC;AAAA;;AA0BzCC,EAAAA,MAAM,GAAG;AACT,wBACE;AAAA,gBAKG,KAAKjB,KAAL,CAAWC,GAAX,CAAeiB,GAAf,CAAmB,CAACC,IAAD,EAAMC,CAAN,kBAClB;AAAA,gCACF;AAAA,qBAAKA,CAAC,GAAC,CAAP,QAAYD,IAAI,CAAChB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADE,eAED;AAAA,0BAAMgB,IAAI,CAACE,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFC,eAGD;AAAA,oBAAIF,IAAI,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,gBAHC;AAAA,SAAUH,IAAI,CAACjB,EAAf;AAAA;AAAA;AAAA;AAAA,cADD;AALH;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AA5C0C;;AA+C/C,eAAeJ,gBAAf","sourcesContent":["import React from 'react';\r\nclass Jsonplaceholders extends React.Component {\r\nstate={url:[],id:\"\",title:\"\"}\r\ncomponentDidMount=()=>{\r\nthis.getPost()\r\n}\r\ncomponentDidUpdate=()=>{\r\n\r\n  log\r\n}\r\n\r\n\r\n    getPost = () => {\r\n        fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n        //   the data=posts\r\n          .then((data) => {\r\n            console.log(data);\r\n            // in order that the empty array posts wil reccive the data from the jsonplaceholders\r\n            this.setState({ url: data }) \r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      };\r\n      render() {\r\n      return (\r\n        <div>\r\n            {/* in order to reccive the data that fro json */}\r\n  \r\n  \r\n  {/* here we map the data that now is the url that contains the post */}\r\n          {this.state.url.map((post,i) => ( \r\n            <div key={post.id}>\r\n          <h1>{i+1}. {post.title}</h1>\r\n           <h2> {post.body}</h2>\r\n           <p>{post.description}</p>\r\n            </div>\r\n          ))}\r\n          \r\n         \r\n        </div>\r\n      )\r\n    }}\r\n  \r\n \r\nexport default Jsonplaceholders ;"]},"metadata":{},"sourceType":"module"}